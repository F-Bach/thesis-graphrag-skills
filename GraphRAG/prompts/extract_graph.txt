-Goal-
Given a text document that is potentially relevant to this activity and a list of entity types, identify all entities of types [name, experience, languages, education, technical skills, programming languages] from the text and all relationships among the identified entities.

-Steps-
1. Identify all entities of the specified types. For each identified entity, extract the following information:
- entity_name: Name of the entity, capitalized and STANDARDIZED (see standardization rules below)
- entity_type: One of [name, tech_skills, programming_languages, position, language, degree]
- entity_description: Comprehensive description that includes ALL available information about the entity and its context

ENTITY NAME STANDARDIZATION RULES:
- Remove all apostrophes (') from entity names: "O'Connor" → "OCONNOR"
- Remove all quotation marks (¨, ", ") from entity names
- Remove all accents and special characters: "García" → "GARCIA", "Müller" → "MULLER"
- Convert to uppercase: "john doe" → "JOHN DOE"
- Remove extra spaces and normalize spacing: "John  Doe" → "JOHN DOE"
- Fix common typos and normalize variations of the same name
- Treat variations like "Jr.", "Sr.", "III" as part of the same standardized name

IMPORTANT VALIDATION RULES:
1. ONLY extract entities whose names exactly match or are clear variations of names found in the input data.
2. DO NOT extract entities with generic or placeholder terms: "unknown", "N/A", "not specified", "TBD", "pending", "various", "multiple", "NAME1", "NAME2", "COMPANY", "ORGANIZATION", "INSTITUTION", "EMPLOYEE", "MANAGER", "CLIENT", "CUSTOMER", "USER", or any similar non-specific term.
3. If the input contains a placeholder, generic, or template value (such as "NAME1", "COMPANY", etc.), do NOT extract it as an entity.
4. DEDUPLICATION: If you find multiple references to the same entity, consolidate them into one entity using the standardized name format.

Format each entity as ("entity"{tuple_delimiter}<entity_name>{tuple_delimiter}<entity_type>{tuple_delimiter}<entity_description>)

2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.
For each pair of related entities, extract the following information:
- source_entity: standardized name of the source entity, as identified in step 1
- target_entity: standardized name of the target entity, as identified in step 1
- relationship_description: explanation as to why you think the source entity and target entity are related to each other
- relationship_strength: an integer score between 1 to 10, indicating strength of the relationship between the source entity and target entity
Format each relationship as ("relationship"{tuple_delimiter}<source_entity>{tuple_delimiter}<target_entity>{tuple_delimiter}<relationship_description>{tuple_delimiter}<relationship_strength>)

3. Return output in Spanish as a single list of all entities and relationships identified in steps 1 and 2. Use **{record_delimiter}** as the list delimiter.

4. If you have to translate into Spanish, just translate the descriptions, nothing else!

5. When finished, output {completion_delimiter}.

######################
-Examples-
######################

Example 1:
entity_types: [name, experience, languages, education, technical skills, programming languages]
text:
final name: JOHN DOE . email: john.doe@email.com . tech_skills: Software Developer . programming_languages: Java, Python . position: Senior Developer . degree: Master in Computer Science
------------------------
output:
("entity"{tuple_delimiter}JOHN DOE{tuple_delimiter}name{tuple_delimiter}JOHN DOE es una persona identificada en el documento con email john.doe@email.com){record_delimiter}
("entity"{tuple_delimiter}SOFTWARE DEVELOPER{tuple_delimiter}tech_skills{tuple_delimiter}Software Developer es una habilidad técnica que posee JOHN DOE){record_delimiter}
("entity"{tuple_delimiter}JAVA{tuple_delimiter}programming_languages{tuple_delimiter}Java es un lenguaje de programación que conoce JOHN DOE){record_delimiter}
("entity"{tuple_delimiter}PYTHON{tuple_delimiter}programming_languages{tuple_delimiter}Python es un lenguaje de programación que conoce JOHN DOE){record_delimiter}
("entity"{tuple_delimiter}SENIOR DEVELOPER{tuple_delimiter}position{tuple_delimiter}Senior Developer es la posición que ocupa JOHN DOE){record_delimiter}
("entity"{tuple_delimiter}MASTER IN COMPUTER SCIENCE{tuple_delimiter}degree{tuple_delimiter}Master in Computer Science es el título académico obtenido por JOHN DOE){record_delimiter}
("relationship"{tuple_delimiter}JOHN DOE{tuple_delimiter}SOFTWARE DEVELOPER{tuple_delimiter}JOHN DOE posee la habilidad técnica de Software Developer{tuple_delimiter}9){record_delimiter}
("relationship"{tuple_delimiter}JOHN DOE{tuple_delimiter}JAVA{tuple_delimiter}JOHN DOE conoce el lenguaje de programación Java{tuple_delimiter}8){record_delimiter}
("relationship"{tuple_delimiter}JOHN DOE{tuple_delimiter}SENIOR DEVELOPER{tuple_delimiter}JOHN DOE ocupa la posición de Senior Developer{tuple_delimiter}10){completion_delimiter}

Example 2 (Negative Case):
entity_types: [name, experience, languages, education, technical skills, programming languages]
text:
final name: NAME1 . tech_skills: Software Developer.
------------------------
output:
(No entities should be extracted, as "NAME1" is a placeholder.)
{completion_delimiter}

######################
-Real Data-
######################
entity_types: [name, experience, languages, education, technical skills, programming languages]
text: {input_text}
######################
output:
